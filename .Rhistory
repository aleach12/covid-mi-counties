rename_all(tolower) %>%
rename(., "geography" = name) %>%
mutate(geography = ifelse(geography == "Wayne", "Balance_of_Wayne", geography)) %>%
select(geography, aland),
by = "geography") %>%
mutate(aland = ifelse(geography == "Detroit City", 359279682,
ifelse(geography == "Balance_of_Wayne", aland - 359279682, aland)),
cases_per_hundred_thousand_residents = ifelse(cases == 0, 0, cases / (population_2018 / 100000)),
deaths_per_hundred_thousand_residents = ifelse(reported_deaths == 0, 0, reported_deaths / (population_2018 / 100000)),
sq_km = aland / 1000000,
residents_per_km2 = population_2018 / sq_km,
death_rate = reported_deaths / population_2018) %>%
st_sf(.)
deaths <- ggplot(tmp, aes(x = date, y = deaths_per_hundred_thousand_residents)) +
facet_wrap("geography", nrow = 7) +
geom_line(col = "blue", size = 1.1) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5),
panel.background = element_blank(),
panel.grid.major.y = element_line(color = "grey80", linetype = "solid", size = 0.4),
panel.grid.major.x = element_blank(),
strip.background = element_rect(color = "black", fill = "white", size = 0.8))
ggsave(deaths, filename = "graphics/covid-deaths.jpeg", width = 16, height = 10, dpi = 600)
tmp <- readxl::read_xlsx("inputs/co-est2019-annres-26.xlsx", skip = 3) %>%
rename(., "geography" = 1, "population_2018" = "2018") %>%
filter(geography != "Michigan") %>%
select(geography, population_2018) %>%
mutate(geography = str_replace_all(geography, c(" County, Michigan" = "", "Wayne" = "Balance_of_Wayne")),
geography = str_sub(geography, 2, -1),
population_2018 = ifelse(geography == "Balance_of_Wayne", population_2018 - 672662, population_2018)) %>%
add_row(., geography = "Detroit City", population_2018 = 672662) %>%
left_join(., read_csv("https://raw.githubusercontent.com/Wilfongjt/wilfongjt-data/master/covid-19/covid19.csv") %>%
rename_all(tolower) %>%
replace(., is.na(.), 0) %>%
rename(., "geography" = "county") %>%
mutate(geography = ifelse(geography == "Wayne", "Balance_of_Wayne", geography),
geography = str_replace(geography, "St", "St.")),
by = "geography") %>%
complete(date, nesting(geography, population_2018),
fill = list(cases = 0, reported_deaths = 0)) %>%
filter(!is.na(date)) %>%
left_join(., tigris::counties("MI", cb = TRUE, class = "sf") %>%
rename_all(tolower) %>%
rename(., "geography" = name) %>%
mutate(geography = ifelse(geography == "Wayne", "Balance_of_Wayne", geography)) %>%
select(geography, aland),
by = "geography") %>%
mutate(aland = ifelse(geography == "Detroit City", 359279682,
ifelse(geography == "Balance_of_Wayne", aland - 359279682, aland)),
cases_per_hundred_thousand_residents = ifelse(cases == 0, 0, cases / (population_2018 / 100000)),
deaths_per_hundred_thousand_residents = ifelse(reported_deaths == 0, 0, reported_deaths / (population_2018 / 100000)),
case_fatality_rate_per_hundred_thousand_residents = ifelse(reported_deaths == 0 | cases == 0, 0, (reported_deaths / cases) / (population_2018 / 100000)),
sq_km = aland / 1000000,
residents_per_km2 = population_2018 / sq_km,
death_rate = reported_deaths / population_2018) %>%
st_sf(.)
case_fatality_rate <- ggplot(tmp, aes(x = date, y = case_fatality_rate_per_hundred_thousand_residents)) +
facet_wrap("geography", nrow = 7) +
geom_line(col = "blue", size = 1.1) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5),
panel.background = element_blank(),
panel.grid.major.y = element_line(color = "grey80", linetype = "solid", size = 0.4),
panel.grid.major.x = element_blank(),
strip.background = element_rect(color = "black", fill = "white", size = 0.8))
case_fatality_rate
View(tmp)
tmp <- readxl::read_xlsx("inputs/co-est2019-annres-26.xlsx", skip = 3) %>%
rename(., "geography" = 1, "population_2018" = "2018") %>%
filter(geography != "Michigan") %>%
select(geography, population_2018) %>%
mutate(geography = str_replace_all(geography, c(" County, Michigan" = "", "Wayne" = "Balance_of_Wayne")),
geography = str_sub(geography, 2, -1),
population_2018 = ifelse(geography == "Balance_of_Wayne", population_2018 - 672662, population_2018)) %>%
add_row(., geography = "Detroit City", population_2018 = 672662) %>%
left_join(., read_csv("https://raw.githubusercontent.com/Wilfongjt/wilfongjt-data/master/covid-19/covid19.csv") %>%
rename_all(tolower) %>%
replace(., is.na(.), 0) %>%
rename(., "geography" = "county") %>%
mutate(geography = ifelse(geography == "Wayne", "Balance_of_Wayne", geography),
geography = str_replace(geography, "St", "St.")),
by = "geography") %>%
complete(date, nesting(geography, population_2018),
fill = list(cases = 0, reported_deaths = 0)) %>%
filter(!is.na(date)) %>%
left_join(., tigris::counties("MI", cb = TRUE, class = "sf") %>%
rename_all(tolower) %>%
rename(., "geography" = name) %>%
mutate(geography = ifelse(geography == "Wayne", "Balance_of_Wayne", geography)) %>%
select(geography, aland),
by = "geography") %>%
mutate(aland = ifelse(geography == "Detroit City", 359279682,
ifelse(geography == "Balance_of_Wayne", aland - 359279682, aland)),
cases_per_hundred_thousand_residents = ifelse(cases == 0, 0, cases / (population_2018 / 100000)),
deaths_per_hundred_thousand_residents = ifelse(reported_deaths == 0, 0, reported_deaths / (population_2018 / 100000)),
case_fatality_rate_per_hundred_thousand_residents = ifelse(reported_deaths == 0 | cases == 0, 0, (reported_deaths / cases) / (population_2018 / 100000) * 100),
sq_km = aland / 1000000,
residents_per_km2 = population_2018 / sq_km,
death_rate = reported_deaths / population_2018) %>%
st_sf(.)
View(tmp)
tmp <- readxl::read_xlsx("inputs/co-est2019-annres-26.xlsx", skip = 3) %>%
rename(., "geography" = 1, "population_2018" = "2018") %>%
filter(geography != "Michigan") %>%
select(geography, population_2018) %>%
mutate(geography = str_replace_all(geography, c(" County, Michigan" = "", "Wayne" = "Balance_of_Wayne")),
geography = str_sub(geography, 2, -1),
population_2018 = ifelse(geography == "Balance_of_Wayne", population_2018 - 672662, population_2018)) %>%
add_row(., geography = "Detroit City", population_2018 = 672662) %>%
left_join(., read_csv("https://raw.githubusercontent.com/Wilfongjt/wilfongjt-data/master/covid-19/covid19.csv") %>%
rename_all(tolower) %>%
replace(., is.na(.), 0) %>%
rename(., "geography" = "county") %>%
mutate(geography = ifelse(geography == "Wayne", "Balance_of_Wayne", geography),
geography = str_replace(geography, "St", "St.")),
by = "geography") %>%
complete(date, nesting(geography, population_2018),
fill = list(cases = 0, reported_deaths = 0)) %>%
filter(!is.na(date)) %>%
left_join(., tigris::counties("MI", cb = TRUE, class = "sf") %>%
rename_all(tolower) %>%
rename(., "geography" = name) %>%
mutate(geography = ifelse(geography == "Wayne", "Balance_of_Wayne", geography)) %>%
select(geography, aland),
by = "geography") %>%
mutate(aland = ifelse(geography == "Detroit City", 359279682,
ifelse(geography == "Balance_of_Wayne", aland - 359279682, aland)),
cases_per_hundred_thousand_residents = ifelse(cases == 0, 0, cases / (population_2018 / 100000)),
deaths_per_hundred_thousand_residents = ifelse(reported_deaths == 0, 0, reported_deaths / (population_2018 / 100000)),
case_fatality_rate = ifelse(reported_deaths == 0 | cases == 0, 0, (reported_deaths / cases) * 100),
sq_km = aland / 1000000,
residents_per_km2 = population_2018 / sq_km,
death_rate = reported_deaths / population_2018) %>%
st_sf(.)
case_fatality_rate <- ggplot(tmp, aes(x = date, y = case_fatality_rate_per_hundred_thousand_residents)) +
facet_wrap("geography", nrow = 7) +
geom_line(col = "blue", size = 1.1) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5),
panel.background = element_blank(),
panel.grid.major.y = element_line(color = "grey80", linetype = "solid", size = 0.4),
panel.grid.major.x = element_blank(),
strip.background = element_rect(color = "black", fill = "white", size = 0.8))
case_fatality_rate
case_fatality_rate <- ggplot(tmp, aes(x = date, y = case_fatality_rate) +
case_fatality_rate <- ggplot(tmp, aes(x = date, y = case_fatality_rate) +
case_fatality_rate <- ggplot(tmp, aes(x = date, y = case_fatality_rate)) +
facet_wrap("geography", nrow = 7) +
geom_line(col = "blue", size = 1.1) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5),
panel.background = element_blank(),
panel.grid.major.y = element_line(color = "grey80", linetype = "solid", size = 0.4),
panel.grid.major.x = element_blank(),
strip.background = element_rect(color = "black", fill = "white", size = 0.8))
case_fatality_rate <- ggplot(tmp, aes(x = date, y = case_fatality_rate)) +
facet_wrap("geography", nrow = 7) +
geom_line(col = "blue", size = 1.1) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5),
panel.background = element_blank(),
panel.grid.major.y = element_line(color = "grey80", linetype = "solid", size = 0.4),
panel.grid.major.x = element_blank(),
strip.background = element_rect(color = "black", fill = "white", size = 0.8))
case_fatality_rate <- ggplot(tmp, aes(x = date, y = case_fatality_rate)) +
facet_wrap("geography", nrow = 7) +
geom_line(col = "blue", size = 1.1) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5),
panel.background = element_blank(),
panel.grid.major.y = element_line(color = "grey80", linetype = "solid", size = 0.4),
panel.grid.major.x = element_blank(),
strip.background = element_rect(color = "black", fill = "white", size = 0.8))
case_fatality_rate
View(tmp)
case_fatality_rate <- ggplot(tmp, aes(x = date, y = case_fatality_rate)) +
facet_wrap("geography", nrow = 7) +
geom_line(col = "blue", size = 1.1) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5),
panel.background = element_blank(),
panel.grid.major.y = element_line(color = "grey80", linetype = "solid", size = 0.4),
panel.grid.major.x = element_blank(),
strip.background = element_rect(color = "black", fill = "white", size = 0.8)) +
scale_y_continuous(breaks = seq(0, 50, 5), labels = str_c(seq(0, 50, 5), "%"))
case_fatality_rate
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5),
panel.background = element_blank(),
panel.grid.major.y = element_line(color = "grey80", linetype = "solid", size = 0.4),
panel.grid.major.x = element_blank(),
strip.background = element_rect(color = "black", fill = "white", size = 0.8)) +
scale_y_continuous(breaks = seq(0, 50, 5), labels = str_c(seq(0, 50, 5), "%"), limits = c(0, 50))
case_fatality_rate
case_fatality_rate <- ggplot(tmp, aes(x = date, y = case_fatality_rate)) +
facet_wrap("geography", nrow = 7) +
geom_line(col = "blue", size = 1.1) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5),
panel.background = element_blank(),
panel.grid.major.y = element_line(color = "grey80", linetype = "solid", size = 0.4),
panel.grid.major.x = element_blank(),
strip.background = element_rect(color = "black", fill = "white", size = 0.8)) +
scale_y_continuous(breaks = seq(0, 50, 5), labels = str_c(seq(0, 50, 5), "%")) +
ylim= c(0, 50)
case_fatality_rate <- ggplot(tmp, aes(x = date, y = case_fatality_rate)) +
facet_wrap("geography", nrow = 7) +
geom_line(col = "blue", size = 1.1) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5),
panel.background = element_blank(),
panel.grid.major.y = element_line(color = "grey80", linetype = "solid", size = 0.4),
panel.grid.major.x = element_blank(),
strip.background = element_rect(color = "black", fill = "white", size = 0.8)) +
scale_y_continuous(breaks = seq(0, 50, 5), labels = str_c(seq(0, 50, 5), "%")) +
ylim = c(0, 50)
case_fatality_rate <- ggplot(tmp, aes(x = date, y = case_fatality_rate)) +
facet_wrap("geography", nrow = 7) +
geom_line(col = "blue", size = 1.1) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5),
panel.background = element_blank(),
panel.grid.major.y = element_line(color = "grey80", linetype = "solid", size = 0.4),
panel.grid.major.x = element_blank(),
strip.background = element_rect(color = "black", fill = "white", size = 0.8)) +
scale_y_continuous(breaks = seq(0, 50, 5), labels = str_c(seq(0, 50, 5), "%")) +
ylim(0, 50)
case_fatality_rate
case_fatality_rate <- ggplot(tmp, aes(x = date, y = case_fatality_rate)) +
facet_wrap("geography", nrow = 7) +
geom_line(col = "blue", size = 1.1) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5),
panel.background = element_blank(),
panel.grid.major.y = element_line(color = "grey80", linetype = "solid", size = 0.4),
panel.grid.major.x = element_blank(),
strip.background = element_rect(color = "black", fill = "white", size = 0.8)) +
scale_y_continuous(breaks = seq(0, 50, 5), labels = str_c(seq(0, 50, 5),"%")) +
ylim(0, 50)
ggsave(deaths, filename = "graphics/case_fatality_rate.jpeg", width = 16, height = 10, dpi = 600)
case_fatality_rate <- ggplot(tmp, aes(x = date, y = case_fatality_rate)) +
facet_wrap("geography", nrow = 7) +
geom_line(col = "blue", size = 1.1) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5),
panel.background = element_blank(),
panel.grid.major.y = element_line(color = "grey80", linetype = "solid", size = 0.4),
panel.grid.major.x = element_blank(),
strip.background = element_rect(color = "black", fill = "white", size = 0.8)) +
scale_y_continuous(breaks = seq(0, 50, 5), labels = str_c(seq(0, 50, 5),"%")) +
ylim(0, 50)
ggsave(case_fatality_rate, filename = "graphics/case_fatality_rate.jpeg", width = 16, height = 10, dpi = 600)
county_april_cases <-
tmp %>%
mutate(geography =
ifelse(geography == "Detroit City", "Balance_of_Wayne", geography)) %>%
group_by(geography, date) %>%
summarise_if(is.numeric, sum)
summary(county_april_cases)
county_april_cases_map <-
tm_shape(county_april_cases) +
tm_facets(along = "date", free.coords = FALSE, nrow = 1, ncol = 1) +
tm_fill(col = "cases_per_hundred_thousand_residents", palette = "Blues", breaks = c(-1, 0, 50, 100, 500, 1000, 1500, 1800, 2500),
interval.closure = "right", labels = c("0", "1 to 50", "50 to 100", "100 to 500", "500 to 1000", "1000 to 1500", "1500 to 1800", "1800 to 2500")) +
tm_shape(county_april_cases) +
tm_borders(col = "grey80", lwd = 0.01) +
tm_credits("Source: Michigan Disease Surveillance System and Vital Records", position = c(0.05, 0), size = 0.4) +
tm_layout(legend.title.color = "white",
title = str_c("Covid Cases Per Hundred Thousand Residents"),
title.bg.color = "white",
main.title.size = 0.9,
main.title.position = "center",
frame = FALSE)
tmap_animation(county_april_cases_map, filename="graphics/county_cases_animation.gif", width=1200, height = 1500, delay=100, loop = TRUE)
county_april_cases_map <-
tm_shape(county_april_cases) +
tm_facets(along = "date", free.coords = FALSE, nrow = 1, ncol = 1) +
tm_fill(col = "cases_per_hundred_thousand_residents", palette = "Blues", breaks = c(-1, 0, 50, 100, 250, 500, 1000, 1250, 2500),
interval.closure = "right", labels = c("0", "1 to 50", "50 to 100", "100 to 250", "250 to 500", "500 to 1000", "1250 to 2500")) +
tm_shape(county_april_cases) +
tm_borders(col = "grey80", lwd = 0.01) +
tm_credits("Source: Michigan Disease Surveillance System and Vital Records", position = c(0.05, 0), size = 0.4) +
tm_layout(legend.title.color = "white",
title = str_c("Covid Cases Per Hundred Thousand Residents"),
title.bg.color = "white",
main.title.size = 0.9,
main.title.position = "center",
frame = FALSE)
tmap_animation(county_april_cases_map, filename="graphics/county_cases_animation.gif", width=1200, height = 1500, delay=100, loop = TRUE)
county_april_cases_map <-
tm_shape(county_april_cases) +
tm_facets(along = "date", free.coords = FALSE, nrow = 1, ncol = 1) +
tm_fill(col = "cases_per_hundred_thousand_residents", palette = "Blues", breaks = c(-1, 0, 50, 100, 250, 500, 1000, 2500),
interval.closure = "right", labels = c("0", "1 to 50", "50 to 100", "100 to 250", "250 to 500", "500 to 1000", "1250 to 2500")) +
tm_shape(county_april_cases) +
tm_borders(col = "grey80", lwd = 0.01) +
tm_credits("Source: Michigan Disease Surveillance System and Vital Records", position = c(0.05, 0), size = 0.4) +
tm_layout(legend.title.color = "white",
title = str_c("Covid Cases Per Hundred Thousand Residents"),
title.bg.color = "white",
main.title.size = 0.9,
main.title.position = "center",
frame = FALSE)
tmap_animation(county_april_cases_map, filename="graphics/county_cases_animation.gif", width=1200, height = 1500, delay=100, loop = TRUE)
county_april_deaths <-
tmp %>%
mutate(geography =
ifelse(geography == "Detroit City", "Balance_of_Wayne", geography)) %>%
group_by(geography, date) %>%
summarise_if(is.numeric, sum)
summary(county_april_deaths)
county_april_deaths_map <-
tm_shape(county_april_deaths) +
tm_facets(along = "date", free.coords = FALSE, nrow = 1, ncol = 1) +
tm_fill(col = "deaths_per_hundred_thousand_residents", palette = "Blues", breaks = c(-1, 0, 1, 5, 10, 30, 50, 100, 300),
interval.closure = "right", labels = c("0", "1", "1 to 5", "5 to 10", "10 to 30", "30 to 50", "50 to 100", "100 to 250")) +
tm_shape(county_april_deaths) +
tm_borders(col = "grey80", lwd = 0.01) +
tm_credits("Source: Michigan Disease Surveillance System and Vital Records", position = c(0.05, 0), size = 0.4) +
tm_layout(legend.title.color = "white",
title = str_c("Covid Deaths Per Hundred Thousand Residents"),
title.bg.color = "white",
main.title.size = 0.9,
main.title.position = "center",
frame = FALSE)
tmap_animation(county_april_deaths_map, filename="graphics/county_deaths_animation.gif", width=1200, height = 1500, delay=100, loop = TRUE)
county_april_deaths_map <-
tm_shape(county_april_deaths) +
tm_facets(along = "date", free.coords = FALSE, nrow = 1, ncol = 1) +
tm_fill(col = "deaths_per_hundred_thousand_residents", palette = "Blues", breaks = c(-1, 0, 1, 5, 10, 30, 50, 100, 300),
interval.closure = "right", labels = c("0", "1", "1 to 5", "5 to 10", "10 to 30", "30 to 50", "50 to 100", "100 to 300")) +
tm_shape(county_april_deaths) +
tm_borders(col = "grey80", lwd = 0.01) +
tm_credits("Source: Michigan Disease Surveillance System and Vital Records", position = c(0.05, 0), size = 0.4) +
tm_layout(legend.title.color = "white",
title = str_c("Covid Deaths Per Hundred Thousand Residents"),
title.bg.color = "white",
main.title.size = 0.9,
main.title.position = "center",
frame = FALSE)
tmap_animation(county_april_deaths_map, filename="graphics/county_deaths_animation.gif", width=1200, height = 1500, delay=100, loop = TRUE)
county_april_deaths_map <-
tm_shape(county_april_deaths) +
tm_facets(along = "date", free.coords = FALSE, nrow = 1, ncol = 1) +
tm_fill(col = "deaths_per_hundred_thousand_residents", palette = "Blues", breaks = c(-1, 0, 5, 10, 30, 50, 100, 300),
interval.closure = "right", labels = c("0", "1 to 5", "5 to 10", "10 to 30", "30 to 50", "50 to 100", "100 to 300")) +
tm_shape(county_april_deaths) +
tm_borders(col = "grey80", lwd = 0.01) +
tm_credits("Source: Michigan Disease Surveillance System and Vital Records", position = c(0.05, 0), size = 0.4) +
tm_layout(legend.title.color = "white",
title = str_c("Covid Deaths Per Hundred Thousand Residents"),
title.bg.color = "white",
main.title.size = 0.9,
main.title.position = "center",
frame = FALSE)
tmap_animation(county_april_deaths_map, filename="graphics/county_deaths_animation.gif", width=1200, height = 1500, delay=100, loop = TRUE)
View(tmp)
675000 * 3
100000 / 1000000
330000000 * .1
97794 / 1646495
0.05939526 * 330000000
0.002 * 330000000
test <- function(x){}
test <- function(x){x + 1}
12000 * 330000000
17 * 1000 * 2000
60 * 180
#### daily cases for state
daily_mi <- tmp %>%
group_by(date) %>%
summarise_if(is.numeric, sum)
daily_mi
#### daily cases for state
daily_mi <- tmp %>%
group_by(date) %>%
summarise_if(is.numeric, sum) %>%
ungroup() %>%
mutate(daily_cases = cases - lag(cases),
daily_deaths = reported_deaths - lag(reported_deaths))
View(daily_mi)
#### daily cases for state
daily_mi <- tmp %>%
group_by(date) %>%
summarise_if(is.numeric, sum) %>%
ungroup() %>%
mutate(daily_cases = cases - lag(cases),
daily_deaths = reported_deaths - lag(reported_deaths)) %>%
select(date, cases, daily_cases, reported_deaths, daily_cases)
library(data.table)
View(daily_mi)
#### daily cases for state
daily_mi <- tmp %>%
st_set_geometry(NULL) %>%
group_by(date) %>%
summarise_if(is.numeric, sum) %>%
ungroup() %>%
mutate(daily_cases = cases - lag(cases),
daily_deaths = reported_deaths - lag(reported_deaths)) %>%
select(date, cases, daily_cases, reported_deaths, daily_deaths)
View(daily_mi)
#### daily cases for state
daily_mi <- tmp %>%
st_set_geometry(NULL) %>%
group_by(date) %>%
summarise_if(is.numeric, sum) %>%
ungroup() %>%
mutate(daily_cases = cases - lag(cases),
daily_deaths = reported_deaths - lag(reported_deaths)) %>%
select(date, daily_cases, daily_deaths) %>%
gather(., data, value, -date)
View(daily_mi)
#### daily cases for state
daily_mi <- tmp %>%
st_set_geometry(NULL) %>%
group_by(date) %>%
summarise_if(is.numeric, sum) %>%
ungroup() %>%
mutate(daily_cases = cases - lag(cases),
daily_deaths = reported_deaths - lag(reported_deaths)) %>%
select(date, daily_cases, daily_deaths) %>%
gather(., data, value, -date) %>%
mutate(panel = ifelse(data == "daily_cases", "NEW COVID CASES PER DAY IN MICHIGAN",
"NEW COVID DEATHS PER DAY IN MICHIGAN"))
daily_cases_state <- ggplot(daily, aes(x = date, y = case_fatality_rate)) +
facet_wrap("panel", nrow = 1) +
geom_line(col = "blue", size = 1.1) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5),
panel.background = element_blank(),
panel.grid.major.y = element_line(color = "grey80", linetype = "solid", size = 0.4),
panel.grid.major.x = element_blank(),
strip.background = element_rect(color = "black", fill = "white", size = 0.8))
daily_cases_state <- ggplot(daily, aes(x = date, y = case_fatality_rate)) +
facet_wrap("panel", nrow = 1) +
geom_line(col = "blue", size = 1.1) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5),
panel.background = element_blank(),
panel.grid.major.y = element_line(color = "grey80", linetype = "solid", size = 0.4),
panel.grid.major.x = element_blank(),
strip.background = element_rect(color = "black", fill = "white", size = 0.8))
daily_cases_state <- ggplot(daily_mi, aes(x = date, y = case_fatality_rate)) +
facet_wrap("panel", nrow = 1) +
geom_line(col = "blue", size = 1.1) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5),
panel.background = element_blank(),
panel.grid.major.y = element_line(color = "grey80", linetype = "solid", size = 0.4),
panel.grid.major.x = element_blank(),
strip.background = element_rect(color = "black", fill = "white", size = 0.8))
daily_cases_state
#### daily cases for state
daily_mi <- tmp %>%
st_set_geometry(NULL) %>%
group_by(date) %>%
summarise_if(is.numeric, sum) %>%
ungroup() %>%
mutate(daily_cases = cases - lag(cases),
daily_deaths = reported_deaths - lag(reported_deaths)) %>%
select(date, daily_cases, daily_deaths) %>%
gather(., data, frequency, -date) %>%
mutate(panel = ifelse(data == "daily_cases", "NEW COVID CASES PER DAY IN MICHIGAN",
"NEW COVID DEATHS PER DAY IN MICHIGAN"))
daily_cases_state <- ggplot(daily_mi, aes(x = date, y = frequency)) +
facet_wrap("panel", nrow = 1) +
geom_line(col = "blue", size = 1.1) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5),
panel.background = element_blank(),
panel.grid.major.y = element_line(color = "grey80", linetype = "solid", size = 0.4),
panel.grid.major.x = element_blank(),
strip.background = element_rect(color = "black", fill = "white", size = 0.8))
daily_cases_state
daily_cases_state <- ggplot(daily_mi, aes(x = date, y = frequency)) +
facet_wrap("panel", nrow = 2, scales = "free_y") +
geom_line(col = "blue", size = 1.1) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5),
panel.background = element_blank(),
panel.grid.major.y = element_line(color = "grey80", linetype = "solid", size = 0.4),
panel.grid.major.x = element_blank(),
strip.background = element_rect(color = "black", fill = "white", size = 0.8))
daily_cases_state
daily_cases_state <- ggplot(daily_mi, aes(x = date, y = frequency)) +
facet_wrap("panel", nrow = 2, scales = "free_y") +
geom_line(col = "blue", size = 1.1) +
theme(
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5),
panel.background = element_blank(),
panel.grid.major.y = element_line(color = "grey80", linetype = "solid", size = 0.4),
panel.grid.major.x = element_blank(),
strip.background = element_rect(color = "black", fill = "white", size = 0.8))
ggsave(daily_cases_state, filename = "graphics/daily_cases_state.jpeg", width = 10, height = 10, dpi = 600)
